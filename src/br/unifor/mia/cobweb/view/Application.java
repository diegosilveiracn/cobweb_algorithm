/*
 * Application.java
 *
 * Created on October 24, 2007, 3:20 PM
 */

package br.unifor.mia.cobweb.view;

import br.unifor.mia.cobweb.control.Cobweb;
import br.unifor.mia.cobweb.model.Category;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 *
 * @author  Diego Silveira
 */
public class Application extends javax.swing.JFrame {
    
    /** Creates new form Application */
    public Application() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jTabbedPaneOptions = new javax.swing.JTabbedPane();
        jPanelDataset = new javax.swing.JPanel();
        jScrollPaneDataset = new javax.swing.JScrollPane();
        jTableDataset = new javax.swing.JTable();
        jPanelTree = new javax.swing.JPanel();
        jSplitPaneTree = new javax.swing.JSplitPane();
        jScrollPaneTree = new javax.swing.JScrollPane();
        jTreeCobweb = new javax.swing.JTree();
        jScrollPaneConsole = new javax.swing.JScrollPane();
        jTextAreaConsole = new javax.swing.JTextArea();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuDataset = new javax.swing.JMenu();
        jMenuItemLoad = new javax.swing.JMenuItem();
        Cobweb = new javax.swing.JMenu();
        jMenuItemTree = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemHelp = new javax.swing.JMenuItem();

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.X_AXIS));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Incremental Conceptual Clustering - COBWEB");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("frameMain");
        jPanelDataset.setLayout(new javax.swing.BoxLayout(jPanelDataset, javax.swing.BoxLayout.X_AXIS));

        jTableDataset.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneDataset.setViewportView(jTableDataset);

        jPanelDataset.add(jScrollPaneDataset);

        jTabbedPaneOptions.addTab("Dataset", jPanelDataset);

        jPanelTree.setLayout(new javax.swing.BoxLayout(jPanelTree, javax.swing.BoxLayout.X_AXIS));

        jSplitPaneTree.setDividerLocation(200);
        jSplitPaneTree.setDividerSize(2);
        jTreeCobweb.setModel(null);
        jScrollPaneTree.setViewportView(jTreeCobweb);

        jSplitPaneTree.setLeftComponent(jScrollPaneTree);

        jTextAreaConsole.setColumns(20);
        jTextAreaConsole.setRows(5);
        jScrollPaneConsole.setViewportView(jTextAreaConsole);

        jSplitPaneTree.setRightComponent(jScrollPaneConsole);

        jPanelTree.add(jSplitPaneTree);

        jTabbedPaneOptions.addTab("Tree", jPanelTree);

        getContentPane().add(jTabbedPaneOptions);

        jMenuDataset.setText("Dataset");
        jMenuItemLoad.setText("Load");
        jMenuItemLoad.setToolTipText("");
        jMenuItemLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadActionPerformed(evt);
            }
        });

        jMenuDataset.add(jMenuItemLoad);

        jMenuBar.add(jMenuDataset);
        jMenuDataset.getAccessibleContext().setAccessibleName("Base");

        Cobweb.setText("Cobweb");
        jMenuItemTree.setText("Generate Tree");
        jMenuItemTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTreeActionPerformed(evt);
            }
        });

        Cobweb.add(jMenuItemTree);

        jMenuBar.add(Cobweb);

        jMenuHelp.setText("Help");
        jMenuItemHelp.setText("About system");
        jMenuItemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHelpActionPerformed(evt);
            }
        });

        jMenuHelp.add(jMenuItemHelp);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-449)/2, (screenSize.height-365)/2, 449, 365);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jMenuItemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHelpActionPerformed
        JOptionPane
                .showMessageDialog(
                this,
                "Incremental Conceptual Clustering - COBWEB\n\n Author: Diego Silveira\n\n University of Fortaleza - Unifor\nMaster Course in Applied Informatics - MIA",
                "Help COBWEB", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemHelpActionPerformed
    
    private void jMenuItemTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTreeActionPerformed
        
        Cobweb cobweb = new Cobweb();
        cobweb.init(this.getColumn(), this.getData());
        Category category = cobweb.getRootCategory();
        
        DefaultMutableTreeNode treeNodeNew = new DefaultMutableTreeNode("ROOT");
        
        this.jTreeCobweb = new JTree(treeNodeNew);
        
        // Event
        this.jTreeCobweb.getSelectionModel().setSelectionMode
                (TreeSelectionModel.SINGLE_TREE_SELECTION);
        this.jTreeCobweb.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                jTreeCobweb.getLastSelectedPathComponent();
                
                Object object = node.getUserObject();
                if (object instanceof Category) {
                    Category c = (Category) object;
                    jTextAreaConsole.setText(c.detail());
                }
            }
        });
        
        this.jScrollPaneTree.setViewportView(this.jTreeCobweb);
        
        treeNodeNew.add(this.createTree(category));
    }//GEN-LAST:event_jMenuItemTreeActionPerformed
    
    private DefaultMutableTreeNode createTree(Category category){
        DefaultMutableTreeNode treeNodeNew = new DefaultMutableTreeNode(category);
        
        if (category.hasSubCategory()){
            for(Category c: category.getSubCategory())
                treeNodeNew.add(this.createTree(c));
        }
        return treeNodeNew;
    }
    
    /**
     * Method to import dataset
     *
     * @param evt ActionEvent object
     */
    private void jMenuItemLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadActionPerformed
        JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
        
        fileChooser.setFileFilter(new FileFilter() {
            public boolean accept(File file) {
                return file.getName().toLowerCase().endsWith(".data");
            }
            
            public String getDescription() {
                return "Base file";
            }
        });
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(this);
        
        if (result == JFileChooser.CANCEL_OPTION)
            return;
        
        File file = fileChooser.getSelectedFile();
        if (file == null || file.getName().equals(""))
            JOptionPane.showMessageDialog(this, "Inavalid file name",
                    "Inavalid file name", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                InputStream fileInputStream = new FileInputStream(file);
                BufferedReader bufferedReader = new BufferedReader(
                        new InputStreamReader(fileInputStream));
                this.makeDatasetTable(bufferedReader);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error when try open file",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItemLoadActionPerformed
    
    /**
     * Method to import dataset into JTable
     *
     * @param bufferedReader BufferedReader object
     */
    private void makeDatasetTable(BufferedReader bufferedReader) throws IOException{
        Vector<Vector> data = new Vector<Vector>();
        Vector<String> columns = new Vector<String>();
        
        boolean firstLine = Boolean.TRUE;
        while (Boolean.TRUE) {
            
            String line = bufferedReader.readLine();
            if (line == null)
                break;
            
            // Make columns ---------------
            if (firstLine) {
                StringTokenizer tokenColumns = new StringTokenizer(
                        line, ",");
                while (tokenColumns.hasMoreTokens()) {
                    columns.add(tokenColumns.nextToken());
                }
                firstLine = !firstLine;
                continue;
            }
            
            // Make data ------------------
            StringTokenizer tokenLines = new StringTokenizer(line, ",");
            Vector<String> elements = new Vector<String>();
            while (tokenLines.hasMoreTokens())
                elements.add(tokenLines.nextToken());
            data.add(elements);
        }
        
        TableModel jTableDataModel = new DefaultTableModel(data,
                columns);
        jTableDataset = new JTable();
        jScrollPaneDataset.setViewportView(jTableDataset);
        jTableDataset.setModel(jTableDataModel);
    }
    
    /**
     * Get vetor of column name
     *
     * @return Vector of column name - Exemple: {"Type", "Value"}
     */
    private String[] getColumn(){
        
        int numberColumn = this.jTableDataset.getColumnCount();
        
        String[] nameColumn = new String[numberColumn];
        
        for (int column = 0; column < numberColumn; column++)
            
            nameColumn[column] = this.jTableDataset.getColumnName(column);
        
        return nameColumn;
    }
    
    /**
     * Get data in JTable
     *
     * @return Matrix of elements - Exemple: {{"Type 1","1"},{"Type 2","2"}}
     */
    private String[][] getData(){
        
        int numberLine = this.jTableDataset.getRowCount();
        int numberColumn = this.jTableDataset.getColumnCount();
        
        String[][] data = new String[numberLine][numberColumn];
        
        for (int line = 0; line < numberLine; line++)
            for (int column = 0; column < numberColumn; column++)
                data[line][column] = (String) this.jTableDataset.getValueAt(line,
                        column);
        
        return data;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Cobweb;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuDataset;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemHelp;
    private javax.swing.JMenuItem jMenuItemLoad;
    private javax.swing.JMenuItem jMenuItemTree;
    private javax.swing.JPanel jPanelDataset;
    private javax.swing.JPanel jPanelTree;
    private javax.swing.JScrollPane jScrollPaneConsole;
    private javax.swing.JScrollPane jScrollPaneDataset;
    private javax.swing.JScrollPane jScrollPaneTree;
    private javax.swing.JSplitPane jSplitPaneTree;
    private javax.swing.JTabbedPane jTabbedPaneOptions;
    private javax.swing.JTable jTableDataset;
    private javax.swing.JTextArea jTextAreaConsole;
    private javax.swing.JTree jTreeCobweb;
    // End of variables declaration//GEN-END:variables
    
}
